<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 配置业务层-->
    <bean id="accountService" class="com.springLearn.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"/>
    </bean>

    <!-- 配置AccountDao -->
    <bean id="accountDao" class="com.springLearn.dao.impl.AccountDaoImpl">
<!--        <property name="jdbcTemplate" ref="jdbcTemplate"/>-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置spring的内置数据源 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/mydbtest"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>
    <!--
        spring中基于xml的声明式事务控制配置步骤:
            1. 配置事务管理器
            2. 配置事务通知
                此时我们需要导入事务通知的约束，tx名称空间和约束，同时也需要aop名称空间和约束
                使用tx:advice标签配置事务通知
                    属性：
                        id：给事务通知起一个唯一标识
                        transaction-manager：给事务通知提供一个事务管理器引用
            3. 配置AOP中的通用切入点表达式
            4. 建立AOP切入点表达式与事务通知的关系
            5. 配置事务通知的属性：在事务通知tx:advice标签内部使用子标签attributes
                isolation:          用于指定事务的隔离级别，默认值是DEFAULT，表示使用数据库的默认隔离级别
                propagation:        用于指定事务的传播行为，默认值时REQUIRED，表示一定会有事务，增删改的选择，查询方法可选择SUPPORTS
                read-only:          用于指定事务是否可读，默认值是false，只有查询方法可以设置为true
                timeout:            用于指定事务的超时时间，默认值为-1，表示永不超时，设置时使用秒为单位
                rollback-for:       用于指定一个异常，该异常时回滚，其他异常不会滚，没有默认值，表示所有异常都回滚
                no-rollback-for:    用于指定一个异常，该异常时不回滚，其他异常时回滚，没有默认值，默认为所有异常都回滚

    -->

    <!-- step 1. 配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--step 2.  配置事务通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- step 5. 配置事务通知的属性-->
        <tx:attributes>
            <!-- 方法可以使用通配符*，也可以部分通配find* -->
            <tx:method name="*" propagation="REQUIRED" read-only="false" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--  配置aop-->
    <aop:config>
        <!-- step 3. 配置切入点表达式 -->
        <aop:pointcut id="pt1" expression="execution(* com.springLearn.service.impl.*.*(..))"/>
        <!-- step 4. 建立切入点表达式和事务通知的关系 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt1"/>
    </aop:config>
</beans>