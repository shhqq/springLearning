<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置spring的ioc，把service对象配置进来 -->
    <bean id="accountService" class="com.springLearn.service.impl.AccountServiceImpl"/>

    <!--  spring中基于xml的AOP配置
        1. 把通知logger 的Bean也交给spring来管理
        2. 使用aop:config标签表明开始AOP的配置
        3. 使用aop:aspect标签表明配置切面
            id属性：给切面提供一个唯一标识
            ref属性：指定通知类bean的id
        4. 在aop:aspect标签内部使用对应的标签来配置通知的类型
            我们现在示例是让printLog方法在切入点方法执行前执行，因此是前置通知
            aop:before :表示配置前置通知
                method属性：用于指定Logger类中哪个方法是前置通知
                pointcut属性：用于指定切入点表达式，指定业务层中对哪些方法进行增强。

                切入点表达式写法：
                    关键字：execution(表达式)
                    表达式：
                        访问修饰符 返回值 包名...类名.方法名(
    -->
    <!-- 配置Logger类 -->
    <bean id="logger" class="com.springLearn.utils.Logger"/>

    <!-- 配置AOP -->
    <aop:config>
        <!-- 配置切面 -->
        <aop:aspect id="logAdvice" ref="logger">
            <!-- 配置通知的类型，并且通过建立通知方法和切入点的关联 -->
            <aop:before method="beforePrintLog" pointcut="execution(* com.springLearn.service.impl.*.*(..))"/>
            <aop:after-returning method="afterReturningPrintLog" pointcut="execution(* com.springLearn.service.impl.*.*(..))"/>
            <aop:after-throwing method="afterThrowingPrintLog" pointcut="execution(* com.springLearn.service.impl.*.*(..))"/>
            <aop:after method="afterPrintLog" pointcut="execution(* com.springLearn.service.impl.*.*(..))"/>
        </aop:aspect>
    </aop:config>
</beans>